[project]
name = "E-Commerce"
version = "0.0.1"
description = "Full e-commerce API using FastAPI. By IQ Tech."
license = "MIT"
readme = "README.md"
requires-python = ">=3.9"
classifiers = ["Private :: Do Not Upload"]
dependencies = [
    "alembic>=1.14.0",
    "anyio>=4.6.2.post1",
    "asyncclick>=8.1.7.2",
    "asyncpg>=0.30.0",
    "email-validator>=2.2.0",
    "fastapi[standard]>=0.115.4",
    "pydantic>=2.9.2",
    "pydantic-settings>=2.6.1",
    "pyjwt>=2.9.0",
    "python-decouple>=3.8",
    "rich>=13.9.4",
    "rtoml>=0.11.0",
    "jinja2>=3.1.4",
    "fastapi-mail>=1.4.1",
    "httpx>=0.27.2",
    "uvicorn[standard]>=0.32.0",
    "sqlalchemy[asyncio]>=2.0.36",
    "typer>=0.12.5",
    "libpass[bcrypt]>=1.9.0",
    "bcrypt>=4.0.1",
    "sqladmin[full]>=0.20.1",
    "fastapi-pagination>=0.12.34",
    "ruff>=0.12.11",
    "black>=25.9.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.21.2",
    "aerich>=0.9.2",
    "orjson>=3.10",
    "fastapi-debug-toolbar>=0.6.3",
    "faker>=36.1.1",
    "pytest-xdist>=3.8.0",
]

authors = [
  { name = "IQ Tech", email = "otabekabdiraimovv@gmail.com" }
]

[project.scripts]
api-admin = "app.api_admin:app"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]
[tool.hatch.build.targets.sdist]
packages = ["app"]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.uv]
dev-dependencies = ["aiosmtpd>=1.4.6", "aiosqlite>=0.20.0", "faker>=30.8.2", "mock>=5.1.0", "mypy>=1.13.0", "poethepoet>=0.29.0", "pre-commit>=4.0.1", "pyfakefs>=5.7.1", "pymarkdownlnt>=0.9.24", "pytest>=8.3.3", "pytest-asyncio == 0.21.2", "pytest-clarity>=1.0.1", "pytest-cov>=6.0.0", "pytest-env>=1.1.5", "pytest-mock>=3.14.0", "pytest-randomly>=3.16.0", "pytest-reverse>=1.8.0", "pytest-sugar>=1.0.0", "pytest-watcher>=0.4.3", "ruff>=0.7.2", "mkdoc>=0.1", "mkdocs-git-revision-date-localized-plugin>=1.3.0", "mkdocs-latest-git-tag-plugin>=0.1.2", "mkdocs-material>=9.5.43", "mkdocs-minify-plugin>=0.8.0", "pymdown-extensions>=10.12", "pygments>=2.18.0", "types-passlib>=1.7.7.20240819", "asyncpg-stubs>=0.30.0", "github-changelog-md>=0.9.5", "mkdocstrings[python]>=0.26.2", "mkdocs-swagger-ui-tag"]
[tool.uv.sources.mkdocs-swagger-ui-tag]
git = "https://github.com/seapagan/mkdocs-swagger-ui-tag"
rev = "fad9a8940bb7544aec63c378319f57b9a443fbaa"
[tool.poe.tasks.pre]
cmd = "pre-commit run --all-files"
help = "Run pre-commit checks"

[tool.poe.tasks.mypy]
cmd = "mypy . --strict"
help = "Run mypy checks"

[tool.poe.tasks.format]
help = "Format code with Ruff"
cmd = "ruff format ."

[tool.poe.tasks.ruff]
help = "Run Ruff checks"
cmd = "ruff check --output-format=concise ."

[tool.poe.tasks.markdown]
cmd = "pymarkdown --strict-config scan  -r docs/**/*.md"
help = "Run markdown checks"

[tool.poe.tasks.test]
help = "Run all tests using Pytest"
cmd = "pytest"

[tool.poe.tasks."test:unit"]
help = "Run only Unit tests using Pytest"
cmd = "pytest -m unit"

[tool.poe.tasks."test:integration"]
help = "Run only Integration tests using Pytest"
cmd = "pytest -m integration"

[tool.poe.tasks."test:skipped"]
cmd = "pytest --quiet --collect-only -m skip --no-cov"
help = "Show skipped tests without running all tests"

[tool.poe.tasks.ty]
help = "Run the 'ty' type-checker (Alpha pre-release version)"
cmd = "uvx ty check --output-format concise"

[tool.poe.tasks.lint]
ignore_fail = "return_non_zero"
help = "Run all linting checks"
sequence = ["format", "ruff", "mypy", "markdown"]

[tool.poe.tasks."docs:publish"]
cmd = "mkdocs gh-deploy"
help = "Publish documentation to GitHub Pages"

[tool.poe.tasks."docs:build"]
cmd = "mkdocs build"
help = "Build documentation locally to './site' folder"

[tool.poe.tasks."docs:serve"]
cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
help = "Serve documentation locally"

[tool.poe.tasks."docs:serve:all"]
cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:8000"
help = "Serve documentation locally on all interfaces"

[tool.poe.tasks.openapi]
cmd = "api-admin docs openapi --prefix=docs/reference"
help = "Generate an OpenAPI JSON file from this API"

[tool.poe.tasks.changelog]
cmd = "github-changelog-md"
help = "Generate the CHANGELOG.md file"
[tool.pymarkdown.plugins.md014]
enabled = false

[tool.pymarkdown.plugins.md046]
enabled = false

[tool.pymarkdown.plugins.md033]
allowed_elements = "!--,![CDATA[,!DOCTYPE,swagger-ui"

[tool.pymarkdown.plugins.md013]
enabled = false

[tool.ruff]
line-length = 120
target-version = "py39"
src = ["app"]
extend-exclude = ["app/migrations"]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["PGH003", "FBT002", "FBT003", "B006"]
extend-ignore = ["COM812", "ISC001", "T201"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = ["S101", "ANN001", "ARG001", "ARG002", "TD003", "FIX002", "RUF012", "SLF001"]
"app/managers/auth.py" = ["ERA001"]
"app/resources/auth.py" = ["ERA001"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query", "fastapi.params.Query"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.9"
exclude = ["app/migrations/"]

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "decouple.*"
[tool.pytest.ini_options]
mock_use_standalone_module = true
addopts = ["-m", "not rewrite", "--cov", "--cov-report", "term-missing", "--cov-report", "html"]
filterwarnings = ["ignore:'crypt' is deprecated:DeprecationWarning", "ignore:ValidatedEmail.email is deprecated:DeprecationWarning"]
markers = ["unit: Unit tests", "integration: Integration tests", "rewrite: Tests need Rewriting"]
testpaths = ["tests"]
env = ["I_READ_THE_DAMN_DOCS=true", "ADMIN_PAGES_ENABLED=true"]
[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*"]
concurrency = ["thread", "greenlet"]

[tool.pyright]
venvPath = "."
venv = ".venv"
reportMissingImports = true
reportMissingTypeStubs = true
pythonVersion = "3.9"
typeCheckingMode = "basic"
include = ["app"]
exclude = ["app/migrations"]
